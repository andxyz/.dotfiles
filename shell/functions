#!/usr/bin/env bash

function httpless {
  # httpless 'http://www.formatportfolio.com/'
  http --pretty=colors --print=HBhb "$@" | less -R;
}

function httpless_headers_only {
  # httpless_headers_only 'http://www.formatportfolio.com/'
  http --pretty=colors --print=HBh "$@" | less -R;
}

function httpless_json_no_color_no_pager {
  # httpless_no_color_no_pager --json GET 'http://www.formatportfolio.com/subscription.js'
  http --pretty=none --print=HBhb "$@";
}

# dig info
function ddig() {
  dig +nocmd "$1" any +multiline +noall +answer
}

function httpperf {
  curl -o /dev/null -s -w "http_code='%{http_code}' time_connect='%{time_connect}' time_starttransfer='%{time_starttransfer}' time_total='%{time_total}'\n" "$@"
}

function jqbrowser {
  local TMPFILE=$(gmktemp --suffix=".json")
  jq '.' > "${TMPFILE}"
  echo "open -b 'com.google.chrome' ${TMPFILE}"
  open -b 'com.google.chrome' "${TMPFILE}"
}

function sscreencapture_in_2_seconds_send_to_desktop {
  screencapture -T2 -S -x "$HOME/Desktop/screenshot-$(date +%Y-%m-%d__%H_%M_%S).png"
}

function postgresstart {
  local pidfile="/usr/local/var/postgres/postmaster.pid"
  if [ -s $pidfile ] && kill -0 $(cat $pidfile | head -n 1) > /dev/null 2>&1; then
    echo "Already running"
  else
    pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
  fi
}

function postgresstop {
  pg_ctl -D /usr/local/var/postgres stop
}

function hhttp_server {
  local port=${1:-8000}
  local ip=$(ipconfig getifaddr en0)
  echo "Serving on ${ip}:${port} ..."
  python -m SimpleHTTPServer ${port}
}

##
# docker
##

function de {
  docker-compose exec "$@"
}

function dew {
  docker-compose exec web "$@"
}

function det {
  docker-compose exec test "$@"
}

function dew-touch-restart-rails {
  docker-compose exec web touch tmp/restart.txt
}

function docker-prune {
  set -x
  docker system df
  docker images -q | wc -l

  docker system prune --all

  docker rmi -f $(docker images --filter=reference='platform*' -q) # wonolo specific

  docker system df
  docker images -q | wc -l
  set +x
}

##
# git
##
function zco {
  # fzf checkout
  # future work... I would like to preview | git log --oneline --topo-order --color --stat=180,150
  local BRANCH_NAME=$(git branch-list.sh |
    fzf --ansi --preview-window down:40% --preview "echo {} | gawk -F'[[:blank:]][[:blank:]]+' '{ print \$4 }'" --no-sort --reverse --exact --select-1 --query="${@:-}" |
    gawk -F'[[:blank:]][[:blank:]]+' '{ print $4 }'
  )
  echo "moving to ${BRANCH_NAME}";
  git checkout ${BRANCH_NAME} && git status --short --branch;
}

function zcoa {
  # fzf checkout on remotes
  local BRANCH_NAME=$(git branch-list.sh -a |
    fzf --ansi --preview-window down:40% --preview "echo {} | gawk -F'[[:blank:]][[:blank:]]+' '{ print \$4 }'" --no-sort --reverse --exact --select-1 --query="${@:-}" |
    gawk -F'[[:blank:]][[:blank:]]+' '{ print $4 }' |
    gsed -r 's:remotes/origin/::g'
  )
  echo "moving to ${BRANCH_NAME}";
  git checkout ${BRANCH_NAME} && git status --short --branch;
}

function zco_fzf() {
  # fco - checkout git branch/tag from https://github.com/junegunn/fzf/wiki/examples#git
  local tags branches target
  tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") |
    fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
  git checkout $(echo "$target" | awk '{print $2}')
}

##### the e editor shortcut for sublimetext (github.com/bkeepers tip)
function e  () {
  # rm -rf project.sublime-workspace > /dev/null 2>&1
  if [[ -f project.sublime-project ]] ; then
    subl ./project.sublime-project
  else
    subl -n ./
  fi
}

# proxy funcs from https://wiki.archlinux.org/index.php/proxy_settings
# to use type `proxy_on` and follow instructions
function proxy_on() {
    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"

    if (( $# > 0 )); then
        valid=$(echo $@ | gsed -n 's/\([0-9]\{1,3\}.\)\{4\}:\([0-9]\+\)/&/p')
        if [[ $valid != $@ ]]; then
            >&2 echo "Invalid address"
            return 1
        fi

        export http_proxy="http://$1/"
        export https_proxy=$http_proxy
        export ftp_proxy=$http_proxy
        export rsync_proxy=$http_proxy
        echo "Proxy environment variable set."
        return 0
    fi

    echo -n "username: "; read username
    if [[ $username != "" ]]; then
        echo -n "password: "
        read -es password
        local pre="$username:$password@"
    fi

    echo -n "server: "; read server
    echo -n "port: "; read port
    export http_proxy="http://$pre$server:$port/"
    export https_proxy=$http_proxy
    export ftp_proxy=$http_proxy
    export rsync_proxy=$http_proxy
    export HTTP_PROXY=$http_proxy
    export HTTPS_PROXY=$http_proxy
    export FTP_PROXY=$http_proxy
    export RSYNC_PROXY=$http_proxy
}

function proxy_off(){
    unset http_proxy
    unset https_proxy
    unset ftp_proxy
    unset rsync_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset FTP_PROXY
    unset RSYNC_PROXY
    echo -e "Proxy environment variable removed."
}
