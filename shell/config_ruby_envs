#!/usr/bin/env bash

# https://bundler.io/blog/2016/09/08/bundler-1-13.html
# First, export the environment variable BUNDLE_ENABLE_TRAMPOLINE.
# In the Bash shell, that means running export BUNDLE_ENABLE_TRAMPOLINE=true.
# Then, run bundle install and bundle exec as usual. You should notice that
# Bundler will automatically switch to the version of Bundler that is saved into the Gemfile.lock.
# To update the version of Bundler saved in the lockfile, run bundle update --bundler
export -- BUNDLE_ENABLE_TRAMPOLINE=true

# Fiddle memory allocated to Ruby
#
# read http://tmm1.net/ruby21-rgengc/
# watch https://youtu.be/gEMnwRAUlKE
#
# https://github.com/ruby/ruby/blob/ruby_2_3/gc.c#L7287
# https://github.com/ruby/ruby/blob/ruby_2_3/gc.c#ruby_gc_set_params
# ruby 2.6 GC tuning environment variables
# https://github.com/ruby/ruby/blob/e68627da985d118be573cd9f7e30617cb2bd76fc/gc.c#L7685

export -- RUBY_GC_HEAP_INIT_SLOTS=600000
export -- RUBY_GC_HEAP_FREE_SLOTS=600000
# - Prepare at least this amount of slots after GC.
# - Allocate slots if there are not enough slots.
export -- RUBY_GC_HEAP_GROWTH_FACTOR=1.25
# (new from 2.1)
# - Allocate slots by this factor.
# - (next slots number) = (current slots number) * (this factor)
export -- RUBY_GC_HEAP_GROWTH_MAX_SLOTS=300000
# (new from 2.1)
# - Allocation rate is limited to this number of slots.
# export -- RUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR
# (new from 2.1.1)
# - Do full GC when the number of old objects is more than R * N
#   where R is this factor and
#         N is the number of old objects just after last full GC.
#  obsolete
#  * RUBY_FREE_MIN       -> RUBY_GC_HEAP_FREE_SLOTS (from 2.1)
#  * RUBY_HEAP_MIN_SLOTS -> RUBY_GC_HEAP_INIT_SLOTS (from 2.1)
export -- RUBY_GC_MALLOC_LIMIT=64000000
export -- RUBY_GC_MALLOC_LIMIT_MAX=32000000 # (new from 2.1)
export -- RUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR=1.4 # (new from 2.1)
# export -- RUBY_GC_OLDMALLOC_LIMIT # (new from 2.1)
# export -- RUBY_GC_OLDMALLOC_LIMIT_MAX # (new from 2.1)
# export -- RUBY_GC_OLDMALLOC_LIMIT_GROWTH_FACTOR # (new from 2.1)

