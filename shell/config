#!/usr/bin/env bash
# echo 'fuck that you have new mail shit'
unset MAILCHECK
test -f "$HOME/.hushlogin" &&
touch $HOME/.hushlogin

# disable the fucking core dumps
ulimit -S -c 0

# echo 'use sublimetext3 (with '-w' wait for close of file) as default editor'
# http://unix.stackexchange.com/questions/4859/visual-vs-editor-whats-the-difference
# http://stackoverflow.com/questions/8299610/zsh-command-not-found-for-editor
# ~/ $ cat ~/bin/EDITOR
# #!/bin/sh
# #open -Wn -- "$@"
# subl -w -- "$@"
export -- EDITOR="$HOME/bin/EDITOR"
export -- VISUAL="$HOME/bin/EDITOR"

# echo 'give me history you dogs of history'
export -- HISTFILE=$HOME/.history
export -- HISTSIZE=999999
export -- SAVEHIST=999999

# Encoding problems
export -- LC_ALL="en_US.UTF-8"
export -- LANG="en_US.UTF-8"

# Increase memory allocated to Ruby
# https://github.com/ruby/ruby/blob/ruby_2_3/gc.c#L7287
# https://github.com/ruby/ruby/blob/ruby_2_3/gc.c#ruby_gc_set_params
export -- RUBY_GC_HEAP_INIT_SLOTS=1000000
export -- RUBY_GC_HEAP_FREE_SLOTS
# - Prepare at least this amount of slots after GC.
# - Allocate slots if there are not enough slots.
export -- RUBY_GC_HEAP_GROWTH_FACTOR=1
# (new from 2.1)
# - Allocate slots by this factor.
# - (next slots number) = (current slots number) * (this factor)
export -- RUBY_GC_HEAP_GROWTH_MAX_SLOTS
# (new from 2.1)
# - Allocation rate is limited to this number of slots.
export -- RUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR
# (new from 2.1.1)
# - Do full GC when the number of old objects is more than R * N
#   where R is this factor and
#         N is the number of old objects just after last full GC.
#  obsolete
#  * RUBY_FREE_MIN       -> RUBY_GC_HEAP_FREE_SLOTS (from 2.1)
#  * RUBY_HEAP_MIN_SLOTS -> RUBY_GC_HEAP_INIT_SLOTS (from 2.1)
export -- RUBY_GC_MALLOC_LIMIT=1000000000
export -- RUBY_GC_MALLOC_LIMIT_MAX=9999999999
 # (new from 2.1)
 export -- RUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR=1
 # (new from 2.1)
 export -- RUBY_GC_OLDMALLOC_LIMIT="#{RUBY_GC_MALLOC_LIMIT}"
 # (new from 2.1)
 export -- RUBY_GC_OLDMALLOC_LIMIT_MAX="#{RUBY_GC_MALLOC_LIMIT_MAX}"
 # (new from 2.1)
 export -- RUBY_GC_OLDMALLOC_LIMIT_GROWTH_FACTOR="#{RUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR}"
# (new from 2.1)

# print elapsed time when more than 10 seconds
REPORTTIME=10

## new solution to using homebrew "ssh-agent"
# launchctl unload /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist
# brew install openssh --with-brewed-openssl --with-keychain-support
# brew install Caskroom/cask/lunchy --force
# lunchy install /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist

## old solution
## http://www.dctrwatson.com/2013/07/how-to-update-openssh-on-mac-os-x/
## http://superuser.com/questions/141044/sharing-the-same-ssh-agent-among-multiple-login-sessions
## ssh_agent_tricks() {
##     eval "$(brew --prefix)/bin/ssh-agent"
##     unset SSH_AUTH_SOCK
##     export -- SSH_AUTH_SOCK=$(launchctl getenv SSH_AUTH_SOCK)
## }
#
## ssh_agent_tricks
#
## function cleanup_openssh {
##   echo "Killing SSH-Agent"
##   kill -9 $SSH_AGENT_PID
## }
#
## trap cleanup_openssh EXIT
