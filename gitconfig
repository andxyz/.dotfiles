[user]
    name = Andrew Stevens
    email = andxyz.stevens@gmail.com

[core]
    pager = less -FRSX
    editor = subl -n -w
    excludesfile = ~/.gitignore_global
    autocrlf = input
    whitespace = trailing-space,space-before-tab,tab-in-indent
    commentChar = !
    preloadindex = true
    fscache = true

[apply]
    whitespace = warn

[color]
    ui = auto

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[color "diff"]
    meta = 11
    frag = magenta bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse

[include]
    path = "${HOME}/code/git/delta/themes.gitconfig"

[pager]
    diff = delta
    log = delta
    reflog = delta
    show = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    syntax-theme = Monokai Extended
    features = line-numbers keep-plus-minus-markers decorations
    whitespace-error-style = magenta reverse
    side-by-side = false

[delta "decorations"]
    commit-decoration-style = none
    file-style = bold yellow ul
    hunk-header-style = file omit
    file-decoration-style = bold yellow box
    hunk-header-decoration-style = none

[commit]
  # template = ~/.gitmessage # turn this off for now, for Jorges work to take over

[push]
    default = simple

[remote]
    pushDefault = origin

[pull]
    rebase = true

[filter "lfs"]
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process

[branch]
    # git help -w git-config # see branch.autosetuprebase
    # this behavior can be chosen per-branch using the --track and --no-track
    autosetupmerge = always
    # When always, rebase will be set to true for all tracking branches
    autosetuprebase = always

[rebase]
    autosquash = true

[fetch]
    prune = true


# fooling around thanks to https://github.com/imbsky/dotfiles/blob/fc18a09126148365bea7a19dcedca0a47c4c44ee/gitconfig
# see https://git-scm.com/docs/protocol-v2
[protocol]
version = 2

# this is messing up cocoapod podspecs
# this is also messing up rust-lang/crates.io during, cargo build --release
# [url "ssh://git@github.com/"]
    # insteadOf = https://github.com/
# Is this the fix? see https://github.com/rust-lang/cargo/issues/3381
# [url "git@github.com:"]
# insteadOf = https://github.com/

[alias]
    # andxyz favorite git shortcuts
    p  = pull
    f  = fetch --all
    fs = fetch origin staging:staging
    fm = fetch origin master:master
    fp = fetch origin production:production
    # pushf_new failed me, reverting for now
    # pushf_new = "!git push --force-with-lease origin \"$(git rev-parse --abbrev-ref HEAD)\""
    pushf = push --force-with-lease
    fetch-and-prune  = fetch --all --prune
    # runs my $HOME/bin/git-branch-list.sh shell script
    b = branch-list.sh
    ls = ls-files
    ls-ignored = !git ls-files -v | grep "^[[:lower:]]"
    unstage = reset HEAD --
    cmend = commit --amend -C HEAD
    wip = "!gitwip() { git add --all && git commit -m 'wip'; }; gitwip"

    # annoying file is annoying
    un = update-index --assume-unchanged
    nun = update-index --no-assume-unchanged

    # diff shortcuts

    diffc = diff --cached
    ## make sure to `npm install -g --silent --no-progress --quiet --depth=0 diff-so-fancy` try `npm ls -g --depth=0`

    # ddiff = "!fgitdiff0() { git diff --color \"$@\" | diff-so-fancy | less --tabs=4 -RFXS; }; fgitdiff0"
    # ddiffc = "!fgitdiffc0() { git diff --cached --color $@ | diff-so-fancy | less --tabs=4 -RFXS; }; fgitdiffc0"
    ddiff = "!fgitddiff0() { git diff --color \"${@}\"; }; fgitddiff0"
    ddiffc = "!fgitddiffc0() { git diff --cached --color \"${@}\"; }; fgitddiffc0"
    d = "ddiff"
    dc = "ddiffc"

    # personal git log opinions
    llog         = log --topo-order --graph
    logsecrets  = "!fgitlog1() { git --no-pager log -p --follow --find-copies-harder --find-renames=25% -- $@; }; fgitlog1"
    logpretty   = log --pretty=format:'%Cred[%h]%Creset%Cgreen[%ci]%C(bold blue)[%aN]%Creset%C(yellow)%d%Creset %s'
    logpbasic    = !git log
    logpnopager = !git --no-pager log

    # commit investigation
    logpatch         = log --topo-order --decorate=full --no-merges --patch
    logponeline      = log --topo-order --decorate --abbrev-commit --abbrev=7 --pretty=format:'%Cred %h %Creset%Cgreen[%ai]%C(bold blue)[%aN]%Creset %s%C(yellow)%d%Creset'
    logpstat         = log --topo-order --color --stat=180,150 --pretty='format: %Cgreen%h%Creset%Cblue by %aN, %ci%Creset  %s%Cred%d%Creset%n'
    logpmerges       = log --topo-order --merges --decorate --pretty=format:'%Cred %h %Creset%Cgreen[%ai]%C(bold blue)[%aN]%Creset %s%C(yellow)%d%Creset'
    logpbuildkite    = !echo "test-$(git rev-parse --short=7 HEAD)"

    # graphing
    logpgraphstat     = log --topo-order --color --stat=180,150 --pretty='format: %Cgreen%h%Creset%Cblue by %aN, %ci%Creset  %s%Cred%d%Creset%n' --graph
    logpgraphoneliner = log --topo-order --graph --color --all --pretty='format: %Cgreen%h%Creset %s%Cred%d%Creset%n'

    # git log commands used on a github flow feature branch PR
    logpr         = "!fgitlogpr0() { git log --topo-order --graph --decorate --boundary ${1:-origin/master}... --pretty=format:'%Cred %h %Creset%Cgreen[%ai]%C(bold blue)[%aN]%Creset %s%C(yellow)%d%Creset'; }; fgitlogpr0"
    logprfull    = "!fgitlogpr1() { git log --topo-order --decorate --boundary ${1:-origin/master}...; }; fgitlogpr1"
    logprpatch    = "!fgitlogpr2() { git log --topo-order --decorate=full --no-merges --boundary ${1:-origin/master}... --patch; }; fgitlogpr2"
    logprstat     = "!fgitlogpr3() { git log --topo-order --boundary ${1:-origin/master}... --stat --oneline; }; fgitlogpr3"

    # git "pad the stats"
    logpstats = "!git shortlog -sne"
    logpstatscontrib = "!git log --format='%aN <%aE>' | awk '{arr[$0]++} END{for (i in arr){print arr[i], i;}}' | sort -rn | head"

    # converted shell aliases
    git-grep = "grep --break --heading --line-number"
    # branch hunting
    git-branch-list-by-date = for-each-ref --sort='-committerdate' --format='%(committerdate:iso8601) %(authoremail) %(refname)'
    git-branch-list         = "branch --list --verbose"
    git-branch-list-all     = "branch --all --verbose"

    # git show alternatives
    showpretty = show --pretty="full" --stat
    showpstat = show --stat=180,150 --pretty="oneline"
    showpnameonly = show --pretty="full" --name-only
    showponline = show --pretty="oneline" --name-only

    # Hacked megascrum from github.com/prograhamer https://github.com/prograhamer/dotfiles/blob/351d1c92613d6a32217206c22635d7c9187cb8b1/.gitconfig#L2-L4
    scrumlog = "!git logpr ${@}"
    scrum = "!git scrumlog --since=\"$([ $(gdate +%w) -eq 1 ] && gdate --date='3 days ago' +%F || gdate --date='2 days ago' +%F)\""
    megascrum = "!for dir in $(find ${PWD} -name .git -exec dirname {} \\;); do (cd \"$dir\" && git --no-pager scrum); done 2>/dev/null | $(git config --get core.pager)"

    # git github.com/haacked https://github.com/Haacked/dotfiles/blob/f625b1c9e89b1e261868ac3244af037b6287b8bd/git/gitconfig.template#L9
    churn = "!git --no-pager log --name-only --oneline | grep -v ' ' | sort | uniq -c | sort -nr | head"

    # git tags
    tagpbydate = "!git log --tags --simplify-by-decoration --pretty='format:%ai %d'"
    # git code review
    codereview-reset-to = "!fgit_codereview_resetto() { bash -c \"git reset --soft $@ && git reset HEAD -- \"; }; fgit_codereview_resetto"
    openunstaged = "!fgit_openunstaged() { $EDITOR_USING_CURRENT_PROJECT $(git add * --intent-to-add && git diff --diff-filter AMUX --name-only); }; fgit_openunstaged"
    openstaged = "!fgit_openstaged() { $EDITOR_USING_CURRENT_PROJECT $(git diff --diff-filter AM --name-only --cached); }; fgit_openstaged"
    opensince = "!fgit_opensince() { $EDITOR_USING_CURRENT_PROJECT $(git diff --diff-filter AMUX --name-only --cached $@); }; fgit_opensince"

    # git hub (depends on brew install hub)
    github-pulls = "!hub browse -- pulls/"
    github-mypulls = "!hub browse -- pulls/andxyz"
    github-open-pull-request = "!hub pull-request"
    hub-pulls = "!git github-pulls"
    hub-mypulls = "!git github-mypulls"
    prs-show = "!git github-pulls"
    prs-mypulls = "!git github-mypulls"
    prs-create = "!hub pull-request -b master --no-edit"

    # not really used aliases but they are useful to look at when hunting for a git command
    delete-remote-branch = push origin --delete
    delete-local-branch = branch -D
    submodule-update-oneliner = submodule update --init --recursive

    # git formatting tips
    # http://stackoverflow.com/questions/16286517/how-to-toggle-the-date-format-of-git-log-how-to-display-both-relative-and-abs
    # http://stackoverflow.com/questions/8576503/how-can-i-make-git-log-order-based-on-authors-timestamp
    # http://git-scm.com/docs/git-for-each-ref

    # andxyz git diff magic
    diffd-icdiff = difftool --tool=icdiff_diff
    diffd-ks = difftool --tool=kaleidoscope_diff
    diffd-vim = difftool --tool=use_vim_diff
    diffd-mvim = difftool --tool=use_mvim_diff
    diffd-p4 = difftool --tool=p4merge_diff
    mergemkaleidoscope = mergetool --tool=kaleidoscope_merge
    # https://github.com/scottgonzalez/pretty-diff
    # diffd-pretty = !$HOME/bin/pretty-diff/pretty-diff.js

    # ctags
    # http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
    ctags = "!.git/hooks/ctags"

    # searching git for stuff
    # http://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja/
    ggrep = grep --break --heading --line-number
    alias = config --get-regexp ^alias\\.

    # I like this gc approach, agressive but keep my reflog
    garbagecollect = "gc --aggressive --no-prune"

    # git config
    confg  = config --global
    confgl = config --global --list
    confge = config --global --edit
    confl  = config --list
    confe  = config --edit

#
# git grep tips
#
# http://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja/
#
[grep]
    lineNumber = true
    extendRegexp = true

# git rerere discussion
#
# https://git-scm.com/blog/2010/03/08/rerere.html
[rerere]
    enabled = false

#
# perforce p4merge aint so great, just buy http://www.kaleidoscopeapp.com/
#
# perforce p4merge setup as the mergetool
# http://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools
# the gist https://gist.github.com/toolbear/861192
# you must have a ~/bin/p4merge file
#
[mergetool "p4merge_merge"]
    cmd = p4merge "$BASE" "$REMOTE" "$LOCAL" "$MERGED"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false

[difftool "p4merge_diff"]
    cmd = "p4merge $LOCAL $REMOTE"

#
# Vim and its variants difftool setups
#
[difftool "use_vim_diff"]
    cmd = vim -d "$LOCAL" "$REMOTE"
    prompt = false
    keepBackup = false
    keepTemporaries = false

[difftool "use_mvim_diff"]
    cmd = mvim -d -f "$LOCAL" "$REMOTE"
    prompt = false
    keepBackup = false
    keepTemporaries = false

#
# kaleidoscope
#
[mergetool "kaleidoscope_merge"]
    cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
    keepBackup = false
    keepTemporaries = false

[difftool "kaleidoscope_diff"]
    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
    keepBackup = false
    keepTemporaries = false

[difftool "icdiff_diff"]
    cmd = icdiff --line-numbers --unified=3 -- \"$LOCAL\" \"$REMOTE\" | less -LRSX
    keepBackup = false
    keepTemporaries = false
    algorithm = patience
    compactionHeuristic = true

[mergetool "vimdiff_merge"]
    tool = vimdiff
    conflictstyle = diff3
    trustExitCode = false

[mergetool "diffmerge"]
    cmd = diffmerge --merge --result=$MERGED $LOCAL $BASE $REMOTE
    trustExitCode = false

#
# sourcetree
#
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

[diff]
    tool = kaleidoscope_diff
    keepBackup = false
    keepTemporaries = false
    algorithm = patience
    compactionHeuristic = true

[merge]
    tool = kaleidoscope_merge
    keepBackup = false
    keepTemporaries = false
    trustExitCode = false
    strategy = recursive
    algorithm = patience
    compactionHeuristic = true

[mergetool]
    tool = kaleidoscope_merge
    keepBackup = false
    keepTemporaries = false
    trustExitCode = false
    prompt = false
    strategy = recursive
    algorithm = patience
    compactionHeuristic = true

[merge "ours"]
    driver = true

# yoinked from https://github.com/exterm/dotfiles/blob/dd2dad77ef8d63273eb2b599ddca5b140ec4e509/.gitconfig#L28
[mergetool "labeled-meld"]
    cmd = `which meld` --output=$MERGED \
          $LOCAL  --label 'current branch' \
          $BASE   --label 'common base (and result file)' \
          $REMOTE --label 'to be merged' \
          2>/dev/null
    trustExitCode = false

#
# ctags are kind of a pain when they run wild
#
# http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
#[init]
#    templatedir = ~/.git_template

#
# better man pages for git, using the website git-scm.com
#
# Thanks to http://twitter.com/rtomayko/status/199572965434728448
# https://gist.github.com/2601550#
# example:
# `git help -w remote `
#
# The new git-scm.com site includes man pages designed for pleasant viewing in a web browser:
# http://git-scm.com/docs
#
# The commands below can be used to configure git to open these pages when
# using `git help -w <command>' from the command line. Just enter the config
# commands in your shell to modify your ~/.gitconfig file.
[browser "gitscm"]
    cmd = /bin/sh -c 'open http://git-scm.com/docs/$(basename $1 .html)' --
[help]
    browser = gitscm

#
# andxyz secret stuff (github auth tokens etc etc)
#
[include]
    path = ~/.gitconfig-private

# how to setup the helper https://help.github.com/articles/caching-your-github-password-in-git/
# see $HOME/bin/git-credential-helper-setup.sh
[credential]
    helper = osxkeychain

[init]
    templatedir = ~/.git-template
	defaultBranch = master
    # defaultBranch = main

# mailmap fixes peoples emails
# try `git shortlog -sne`
[log]
    mailmap = true
    date = relative
[mailmap]
    file = ~/.mailmap-private
