[user]
    name = Andrew Stevens
    email = andxyz.stevens@gmail.com

[core]
    pager = less -FRSX
    editor = subl -n -w
    excludesfile = ~/.gitignore_global
    autocrlf = input

[color]
    ui = auto

[push]
    default = current

[alias]
    # andxyz logging
    last = log -1 HEAD
    unstage = reset HEAD --
    log1  = log -10 --color --all --graph --topo-order --stat=180,150 --pretty='format: %Cgreen%h%Creset%Cblue by %an, %ar%Creset  %s%Cred%d%Creset%n'
    log2  = log -10 --color --all --graph --topo-order --pretty='format: %Cgreen%h%Creset %s%Cred%d%Creset%n'
    log3 = log -p
    log4  = log --color --all --graph --topo-order --pretty='format: %Cgreen%h%Creset %s%Cred%d%Creset%n'
    log5 = log --graph --decorate --pretty=oneline --abbrev-commit
    log6 = log --graph --decorate --pretty=oneline --abbrev-commit --all
    show1 = show --stat=180,150 --pretty="oneline"
    show2 = show --pretty="oneline" --name-only
    show3 = show --pretty="full" --name-only
    # More Fancy logging.
    # 
    # thanks to https://github.com/garybernhardt/dotfiles/blob/master/.gitconfig
    #   h = head
    #   hp = head with patch
    #   r = recent commits, only current branch
    #   ra = recent commits, all reachable refs
    #   l = all commits, only current branch
    #   la = all commits, all reachable refs
    head = !git l -1
    h = !git head
    hp = "!. ~/.githelpers && show_git_head"
    r = !git l -30
    ra = !git r --all
    l = "!. ~/.githelpers && pretty_git_log"
    la = !git l --all


    # andxyz git shortcuts
    st = status
    br = branch
    co = checkout
    ls = ls-files
    # dont really use but they are useful to look at
    delete-remote-branch="git push origin --delete"
    # apply-stash-to-dirty-working-tree = !git stash show -p | git apply && git stash drop
    
    # andxyz diff magic
    diffks = difftool --tool=Kaleidoscope
    diffp4 = difftool --tool=p4merge
    mergeks = mergetool --tool=Kaleidoscope
    # https://github.com/scottgonzalez/pretty-diff
    diffpretty = !$HOME/bin/pretty-diff/pretty-diff.js

    # http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
    ctags = !.git/hooks/ctags

    # searching git for stuff
    # http://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja/
    g = grep --break --heading --line-number

# perforce p4merge aint so great, just buy http://www.kaleidoscopeapp.com/
# 
# perforce p4merge setup as the mergetool
# http://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools
# the gist https://gist.github.com/toolbear/861192
# you must have a ~/bin/p4merge file
# 
[mergetool "p4merge"]
    cmd = p4merge "$BASE" "$REMOTE" "$LOCAL" "$MERGED"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false

[difftool "p4merge"]
    cmd = "p4merge $LOCAL $REMOTE"
   
[mergetool "Kaleidoscope"]
    cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot

[difftool "Kaleidoscope"]
    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[diff]
    tool = Kaleidoscope
    keepBackup = false
    keepTemporaries = false

[merge]
    tool = Kaleidoscope
    keepBackup = false
    keepTemporaries = false
    trustExitCode = false

[mergetool]
    tool = Kaleidoscope
    keepBackup = false
    keepTemporaries = false
    trustExitCode = false
    prompt = false

# ctags are kind of a pain when they run wild
# 
# http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
#[init]
#    templatedir = ~/.git_template


# better man pages for git, using the website git-scm.com
# 
# Thanks to http://twitter.com/rtomayko/status/199572965434728448
# https://gist.github.com/2601550#
# example:
# `git help -w remote `
#
# The new git-scm.com site includes man pages designed for pleasant viewing in a web browser:
# http://git-scm.com/docs
#
# The commands below can be used to configure git to open these pages when
# using `git help -w <command>' from the command line. Just enter the config
# commands in your shell to modify your ~/.gitconfig file.
[browser "gitscm"]
    cmd = /bin/sh -c 'open http://git-scm.com/docs/$(basename $1 .html)' --
[help]
    browser = gitscm

# http://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja/
[grep]
    lineNumber = true

# andxyz secret stuff (github auth tokens etc etc)
[include]
    path            = ~/.gitconfig-private
[url "ssh://git@github.com/"]
    insteadOf = https://github.com/
[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f
